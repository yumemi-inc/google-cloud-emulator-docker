name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  dockerfile-lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Dockerfile lint
        id: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Shellcheck
        run: shellcheck entrypoint.sh

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: google-cloud-emulator-docker:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-create-pubsub-topic:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: examples/create_pubsub_topic
    steps:
      - uses: actions/checkout@v4
      - name: start emulator
        run: docker compose up -d --wait
      - name: test
        run: |
          curl -s http://localhost:8085/v1/projects/test-project/topics | \
            jq -e '. == {
              "topics": [
                {
                  "name": "projects/test-project/topics/email-notifications"
                },
                {
                  "name": "projects/test-project/topics/push-notifications"
                }
              ]
            }'

  test-create-spanner-database:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: examples/create_spanner_database
    steps:
      - uses: actions/checkout@v4
      - name: start emulator
        run: docker compose up -d --wait
      - name: test database creation
        run: |
          # Test using Spanner REST API
          BASE_URL="http://localhost:9010"
          PROJECT_ID="test-project"
          INSTANCE_ID="test-instance"
          DATABASE_ID="test-database"
          
          # Verify instance exists
          echo "Checking if instance exists..."
          curl -f -s "${BASE_URL}/v1/projects/${PROJECT_ID}/instances/${INSTANCE_ID}" | \
            jq -e '.name == "projects/test-project/instances/test-instance"'
          
          # Verify database exists
          echo "Checking if database exists..."
          curl -f -s "${BASE_URL}/v1/projects/${PROJECT_ID}/instances/${INSTANCE_ID}/databases/${DATABASE_ID}" | \
            jq -e '.name == "projects/test-project/instances/test-instance/databases/test-database"'
          
          # Verify tables exist by getting DDL
          echo "Checking database schema..."
          ddl_response=$(curl -f -s "${BASE_URL}/v1/projects/${PROJECT_ID}/instances/${INSTANCE_ID}/databases/${DATABASE_ID}/ddl")
          echo "$ddl_response" | jq -e '.statements | any(contains("CREATE TABLE Users"))'
          echo "$ddl_response" | jq -e '.statements | any(contains("CREATE TABLE Orders"))'
          
          # Verify sample data exists
          echo "Checking sample data..."
          query_payload='{"sql": "SELECT COUNT(*) as user_count FROM Users"}'
          user_count=$(curl -f -s -X POST -H "Content-Type: application/json" \
            -d "$query_payload" \
            "${BASE_URL}/v1/projects/${PROJECT_ID}/instances/${INSTANCE_ID}/databases/${DATABASE_ID}:executeSql" | \
            jq -r '.rows[0][0]')
          
          if [ "$user_count" != "3" ]; then
            echo "Expected 3 users, got $user_count"
            exit 1
          fi
          
          query_payload='{"sql": "SELECT COUNT(*) as order_count FROM Orders"}'
          order_count=$(curl -f -s -X POST -H "Content-Type: application/json" \
            -d "$query_payload" \
            "${BASE_URL}/v1/projects/${PROJECT_ID}/instances/${INSTANCE_ID}/databases/${DATABASE_ID}:executeSql" | \
            jq -r '.rows[0][0]')
          
          if [ "$order_count" != "3" ]; then
            echo "Expected 3 orders, got $order_count"
            exit 1
          fi
          
          echo "All tests passed!"

  test-delayed-initialization:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: tests/delayed_initialization
    steps:
      - uses: actions/checkout@v4
      - name: start emulator
        run: docker compose up -d --wait
      - name: Verify initialization and health check sequence
        run: |
          container_id=$(docker compose ps -q pubsub-emulator)

          # 各タイムスタンプを取得
          init_start=$(docker exec $container_id cat /tmp/init-started)
          init_complete=$(docker exec $container_id cat /tmp/delayed-init-completed)

          # Docker inspect からヘルスチェック履歴を取得
          health_history=$(docker inspect --format='{{json .State.Health.Log}}' $container_id)

          # 最初に成功したヘルスチェックの時刻を抽出
          first_healthy_time=$(echo $health_history | jq -r '.[] | select(.ExitCode==0) | .Start' | head -1 | cut -d'.' -f1)
          first_healthy_time=$(date -d "$first_healthy_time" +%s)

          echo "Initialization started at: $(date -d @$init_start)"
          echo "Initialization completed at: $(date -d @$init_complete)"
          echo "First successful health check at: $(date -d @$first_healthy_time)"

          # 初期化完了後にヘルスチェックが成功していることを確認
          if [ $first_healthy_time -lt $init_complete ]; then
            echo "ERROR: Health check succeeded before initialization completed!"
            exit 1
          fi

          echo "Test passed: Health check succeeded only after initialization completed."
